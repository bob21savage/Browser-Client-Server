{"ast":null,"code":"import React,{useEffect,useState}from'react';const VideoDisplay=()=>{const[urls,setUrls]=useState([]);useEffect(()=>{const fetchUrls=async()=>{try{const response=await fetch('/search',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({})// Send any necessary payload here\n});const data=await response.json();setUrls(data.links);// Assuming the response contains a 'links' array\n// Check if there are any URLs and set the iframe src\nif(data.links.length>0){document.getElementById('videoIframe').src=data.links[0];// Set to the first URL\n}else{console.error('No URLs found to display in the iframe.');}}catch(error){console.error('Error fetching URLs:',error);}};fetchUrls();},[]);return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"iframe\",{id:\"videoIframe\",src:\"\",width:\"600\",height:\"400\",style:{border:'1px solid black'}}));};export default VideoDisplay;","map":{"version":3,"names":["React","useEffect","useState","VideoDisplay","urls","setUrls","fetchUrls","response","fetch","method","headers","body","JSON","stringify","data","json","links","length","document","getElementById","src","console","error","createElement","id","width","height","style","border"],"sources":["C:/Users/bpier/Desktop/scrape/scrape/my app/scrape/src/VideoDisplay.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nconst VideoDisplay = () => {\n    const [urls, setUrls] = useState([]);\n\n    useEffect(() => {\n        const fetchUrls = async () => {\n            try {\n                const response = await fetch('/search', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify({}) // Send any necessary payload here\n                });\n                const data = await response.json();\n                setUrls(data.links); // Assuming the response contains a 'links' array\n\n                // Check if there are any URLs and set the iframe src\n                if (data.links.length > 0) {\n                    document.getElementById('videoIframe').src = data.links[0]; // Set to the first URL\n                } else {\n                    console.error('No URLs found to display in the iframe.');\n                }\n            } catch (error) {\n                console.error('Error fetching URLs:', error);\n            }\n        };\n\n        fetchUrls();\n    }, []);\n\n    return (\n        <div>\n            <iframe id=\"videoIframe\" src=\"\" width=\"600\" height=\"400\" style={{ border: '1px solid black' }}></iframe>\n        </div>\n    );\n};\n\nexport default VideoDisplay;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAElD,KAAM,CAAAC,YAAY,CAAGA,CAAA,GAAM,CACvB,KAAM,CAACC,IAAI,CAAEC,OAAO,CAAC,CAAGH,QAAQ,CAAC,EAAE,CAAC,CAEpCD,SAAS,CAAC,IAAM,CACZ,KAAM,CAAAK,SAAS,CAAG,KAAAA,CAAA,GAAY,CAC1B,GAAI,CACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,SAAS,CAAE,CACpCC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACL,cAAc,CAAE,kBACpB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC,CAAE;AAC7B,CAAC,CAAC,CACF,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAClCV,OAAO,CAACS,IAAI,CAACE,KAAK,CAAC,CAAE;AAErB;AACA,GAAIF,IAAI,CAACE,KAAK,CAACC,MAAM,CAAG,CAAC,CAAE,CACvBC,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAC,CAACC,GAAG,CAAGN,IAAI,CAACE,KAAK,CAAC,CAAC,CAAC,CAAE;AAChE,CAAC,IAAM,CACHK,OAAO,CAACC,KAAK,CAAC,yCAAyC,CAAC,CAC5D,CACJ,CAAE,MAAOA,KAAK,CAAE,CACZD,OAAO,CAACC,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAChD,CACJ,CAAC,CAEDhB,SAAS,CAAC,CAAC,CACf,CAAC,CAAE,EAAE,CAAC,CAEN,mBACIN,KAAA,CAAAuB,aAAA,yBACIvB,KAAA,CAAAuB,aAAA,WAAQC,EAAE,CAAC,aAAa,CAACJ,GAAG,CAAC,EAAE,CAACK,KAAK,CAAC,KAAK,CAACC,MAAM,CAAC,KAAK,CAACC,KAAK,CAAE,CAAEC,MAAM,CAAE,iBAAkB,CAAE,CAAS,CACtG,CAAC,CAEd,CAAC,CAED,cAAe,CAAAzB,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module"}